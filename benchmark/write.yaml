loop_count: 100
contexts:
  - gems:
      csv: 3.0.1
  - gems:
      csv: 3.0.2
  - gems:
      csv: 3.3.0
  - name: "master"
    prelude: |
      $LOAD_PATH.unshift(File.expand_path("lib"))
      require "csv"
prelude: |-
  n_columns = Integer(ENV.fetch("N_COLUMNS", "5"), 10)
  n_rows = Integer(ENV.fetch("N_ROWS", "100"), 10)
  fields = ["AAAAA"] * n_columns
  headers = n_columns.times.collect do |i|
    "header#{i}"
  end
  row = CSV::Row.new(headers, fields)
  raw_row = {}
  n_columns.times do |i|
    raw_row[headers[i]] = fields[i]
  end
benchmark:
  "generate_line: fields": |-
    n_rows.times do
      CSV.generate_line(fields)
    end
  "generate_line: Row": |-
    n_rows.times do
      CSV.generate_line(row)
    end
  "generate_line: Hash": |-
    n_rows.times do
      CSV.generate_line(raw_row, headers: headers)
    end
  "<< fields": |-
    output = StringIO.new
    csv = CSV.new(output)
    n_rows.times do
      csv << fields
    end
  "<< Row": |-
    output = StringIO.new
    csv = CSV.new(output)
    n_rows.times do
      csv << row
    end
  "<< Hash": |-
    output = StringIO.new
    csv = CSV.new(output, headers: headers)
    n_rows.times do
      csv << raw_row
    end
  "<< fields: write headers": |-
    output = StringIO.new
    csv = CSV.new(output, headers: headers, write_headers: true)
    n_rows.times do
      csv << fields
    end
  "<< Row: write headers": |-
    output = StringIO.new
    csv = CSV.new(output, headers: headers, write_headers: true)
    n_rows.times do
      csv << row
    end
  "<< Hash: write headers": |-
    output = StringIO.new
    csv = CSV.new(output, headers: headers, write_headers: true)
    n_rows.times do
      csv << raw_row
    end
